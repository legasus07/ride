import React, { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { motion, AnimatePresence } from "framer-motion";
import { GoogleMap, LoadScript, Marker, DirectionsRenderer } from "@react-google-maps/api";
import { FaComments, FaCreditCard, FaSearch, FaMapMarkerAlt, FaRoute } from "react-icons/fa";
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";

// Firebase config - Now using environment variables
// These variables must be set in your Vercel project settings
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

// Initialize Firebase only if API key is available (important for build time)
let app;
let auth;
let db;

if (firebaseConfig.apiKey) {
  app = initializeApp(firebaseConfig);
  auth = getAuth(app);
  db = getFirestore(app);
} else {
  console.warn("Firebase API Key not found. Firebase services will not be initialized.");
  // You might want to handle this more gracefully in a production app,
  // e.g., by showing a message to the user or disabling Firebase-dependent features.
}


const containerStyle = {
  width: "100%",
  height: "300px" // Adjusted height for better map presentation
};

const RideShareApp = () => {
  const [pickup, setPickup] = useState("");
  const [drop, setDrop] = useState("");
  const [matchedRides, setMatchedRides] = useState([]);
  const [chatVisible, setChatVisible] = useState(false);
  const [userLocation, setUserLocation] = useState(null);
  const [directions, setDirections] = useState(null);
  const [chatMessages, setChatMessages] = useState([
    { sender: "bot", text: "Hi! Welcome to EcoRide. How can I help you book a ride?" }
  ]);
  const [userInput, setUserInput] = useState("");

  // Dummy ride data with slightly adjusted structure for presentation
  const dummyRides = [
    { id: 1, from: "Jaipur", to: "Gurgaon", seats: 2, price: 200, lat: 28.4595, lng: 77.0266, time: "10:00 AM" },
    { id: 2, from: "Jaipur", to: "Delhi", seats: 1, price: 250, lat: 28.6139, lng: 77.2090, time: "11:30 AM" },
    { id: 3, from: "Jaipur", to: "Gurgaon", seats: 3, price: 180, lat: 28.4595, lng: 77.0266, time: "1:00 PM" }
  ];

  // Fetch user location on component mount
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition((position) => {
        setUserLocation({
          lat: position.coords.latitude,
          lng: position.coords.longitude
        });
      }, (error) => {
        console.error("Geolocation error:", error);
        // Fallback or user notification
      });
    }
  }, []);

  // Handle ride search
  const findRideShares = () => {
    const matches = dummyRides.filter(
      (ride) => ride.from.toLowerCase() === pickup.toLowerCase() && ride.to.toLowerCase() === drop.toLowerCase()
    );
    setMatchedRides(matches);

    // Calculate and display directions for the first matched ride if location is available
    // Ensure window.google is defined before calling its services
    if (userLocation && matches.length > 0 && window.google && window.google.maps) {
      const directionsService = new window.google.maps.DirectionsService();
      directionsService.route(
        {
          origin: userLocation,
          destination: { lat: matches[0].lat, lng: matches[0].lng },
          travelMode: window.google.maps.TravelMode.DRIVING
        },
        (result, status) => {
          if (status === window.google.maps.DirectionsStatus.OK) {
            setDirections(result);
          } else {
            console.error("Directions request failed:", status);
          }
        }
      );
    }
  };

  // Handle chat message submission
  const handleChatSubmit = () => {
    if (!userInput.trim()) return;

    const newMessage = { sender: "user", text: userInput };
    // Simple bot reply for demonstration
    const reply = { sender: "bot", text: `Got your message: "${userInput}". We'll assist you shortly.` };

    setChatMessages([...chatMessages, newMessage, reply]);
    setUserInput("");
  };

  // Framer Motion variants for card animation
  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } }
  };

  // Framer Motion variants for chat bubble animation
  const chatBubbleVariants = {
    hidden: { scale: 0, opacity: 0 },
    visible: { scale: 1, opacity: 1, transition: { type: "spring", stiffness: 300, damping: 25 } },
    exit: { scale: 0, opacity: 0 }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-6 relative font-sans">
      
      <header className="text-center mb-10">
        <h1 className="text-5xl font-extrabold text-gray-900 tracking-tight">Eco<span className="text-green-600">Ride</span></h1>
        <p className="text-xl text-gray-700 mt-4">Connect, Share, and Save: Smart Ride Sharing for a Better Planet.</p>
      </header>

      <div className="max-w-2xl mx-auto bg-white shadow-2xl rounded-3xl p-8 space-y-6 transform transition-transform hover:scale-[1.01] duration-300">
        <h2 className="text-2xl font-bold text-gray-800">Find Your Ride</h2>
        <div className="flex flex-col md:flex-row gap-4">
          <Input 
            placeholder="Pickup Location (e.g., Jaipur)" 
            value={pickup} 
            onChange={(e) => setPickup(e.target.value)} 
            className="rounded-lg p-3 border-gray-300 focus:border-green-500 transition-colors"
          />
          <Input 
            placeholder="Drop Location (e.g., Gurgaon)" 
            value={drop} 
            onChange={(e) => setDrop(e.target.value)} 
            className="rounded-lg p-3 border-gray-300 focus:border-green-500 transition-colors"
          />
        </div>
        <Button onClick={findRideShares} className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 rounded-lg shadow-lg transition-transform transform hover:scale-105">
          <FaSearch className="mr-2" /> Find Shared Rides
        </Button>
      </div>

      <section className="mt-16 max-w-4xl mx-auto">
        <h2 className="text-3xl font-bold text-gray-800 mb-8">Available Shared Rides</h2>
        
        <AnimatePresence>
          {matchedRides.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {matchedRides.map((ride) => (
                <motion.div key={ride.id} initial="hidden" animate="visible" variants={cardVariants} whileHover={{ scale: 1.03, transition: { duration: 0.2 } }} className="shadow-xl rounded-2xl overflow-hidden bg-white">
                  <Card className="rounded-2xl border-none">
                    <CardContent className="p-6">
                      
                      <div className="flex items-center mb-4 text-gray-700">
                        <FaRoute className="text-green-500 mr-3 text-2xl" />
                        <h3 className="text-xl font-bold">
                          {ride.from} <span className="text-gray-500">→</span> {ride.to}
                        </h3>
                      </div>
                      
                      <div className="text-sm space-y-2 text-gray-600 mb-6">
                        <p className="flex items-center"><span className="font-semibold text-gray-800 w-24">Seats:</span> {ride.seats} available</p>
                        <p className="flex items-center"><span className="font-semibold text-gray-800 w-24">Time:</span> {ride.time}</p>
                      </div>

                      <div className="mb-6">
                        {/* Google Map Integration */}
                        {/* Ensure NEXT_PUBLIC_GOOGLE_MAPS_API_KEY is set in Vercel environment variables */}
                        <LoadScript googleMapsApiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}>
                          <GoogleMap
                            mapContainerStyle={containerStyle}
                            center={userLocation || { lat: ride.lat, lng: ride.lng }}
                            zoom={userLocation ? 10 : 12}
                          >
                            {userLocation && <Marker position={userLocation} label="You" icon={{url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"}} />}
                            <Marker position={{ lat: ride.lat, lng: ride.lng }} label="Ride" icon={{url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png"}}/>
                            {directions && <DirectionsRenderer directions={directions} />}
                          </GoogleMap>
                        </LoadScript>
                      </div>
                      
                      <div className="flex gap-4 mt-6">
                        <Button className="flex-1 bg-blue-600 hover:bg-blue-700 font-semibold transition-transform duration-200 transform hover:scale-105">
                          Request to Join
                        </Button>
                        <Button variant="outline" className="flex-1 bg-green-100 text-green-800 border-green-300 hover:bg-green-200 font-semibold transition-transform duration-200 transform hover:scale-105">
                          <FaCreditCard className="mr-2" /> Pay ₹{ride.price}
                        </Button>
                      </div>

                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </div>
          ) : (
            <p className="text-center text-gray-600 text-xl py-12">
              <FaMapMarkerAlt className="inline-block mr-2 text-gray-400" />
              Enter your pickup and drop locations to find available rides.
            </p>
          )}
        </AnimatePresence>
      </section>

      {/* Interactive Chat Window */}
      <AnimatePresence>
        {chatVisible && (
          <motion.div 
            initial={{ y: 200, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            exit={{ y: 200, opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="fixed bottom-24 right-6 w-80 max-h-[480px] bg-white shadow-2xl rounded-2xl overflow-hidden flex flex-col border border-gray-200"
          >
            <div className="bg-green-600 text-white p-4 font-bold flex justify-between items-center">
              <span>EcoRide Support</span>
              <button onClick={() => setChatVisible(false)} className="text-white hover:text-gray-100">&times;</button>
            </div>
            
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {chatMessages.map((msg, idx) => (
                <div key={idx} className={`flex ${msg.sender === "user" ? "justify-end" : "justify-start"}`}>
                  <motion.div 
                    className={`p-3 rounded-xl max-w-[80%] text-sm shadow-md ${msg.sender === "user" ? "bg-blue-500 text-white rounded-br-none" : "bg-gray-200 text-gray-800 rounded-bl-none"}`}
                    variants={chatBubbleVariants}
                    initial="hidden"
                    animate="visible"
                  >
                    {msg.text}
                  </motion.div>
                </div>
              ))}
            </div>

            <div className="p-4 border-t border-gray-200 bg-gray-50 flex gap-2">
              <Input 
                value={userInput} 
                onChange={(e) => setUserInput(e.target.value)} 
                placeholder="Type your message..." 
                className="flex-1 rounded-lg border-gray-300" 
                onKeyPress={(e) => { if (e.key === 'Enter') handleChatSubmit(); }}
              />
              <Button onClick={handleChatSubmit} className="bg-green-600 hover:bg-green-700 text-white">Send</Button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Floating Chat Button */}
      <motion.div
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <Button
          onClick={() => setChatVisible(!chatVisible)}
          className="fixed bottom-6 right-6 rounded-full p-6 shadow-2xl bg-green-600 hover:bg-green-700 transition-colors"
          aria-label="Toggle chat support"
        >
          <FaComments className="w-6 h-6 text-white" />
        </Button>
      </motion.div>
      
    </div>
  );
};

export default RideShareApp;
